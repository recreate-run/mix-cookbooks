/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiUploadRouteImport } from './routes/api/upload'
import { Route as ApiSessionRouteImport } from './routes/api/session'
import { Route as AnalyzeSessionIdRouteImport } from './routes/analyze.$sessionId'
import { Route as ApiStreamSessionIdRouteImport } from './routes/api/stream.$sessionId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUploadRoute = ApiUploadRouteImport.update({
  id: '/api/upload',
  path: '/api/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSessionRoute = ApiSessionRouteImport.update({
  id: '/api/session',
  path: '/api/session',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyzeSessionIdRoute = AnalyzeSessionIdRouteImport.update({
  id: '/analyze/$sessionId',
  path: '/analyze/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiStreamSessionIdRoute = ApiStreamSessionIdRouteImport.update({
  id: '/api/stream/$sessionId',
  path: '/api/stream/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/analyze/$sessionId': typeof AnalyzeSessionIdRoute
  '/api/session': typeof ApiSessionRoute
  '/api/upload': typeof ApiUploadRoute
  '/api/stream/$sessionId': typeof ApiStreamSessionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/analyze/$sessionId': typeof AnalyzeSessionIdRoute
  '/api/session': typeof ApiSessionRoute
  '/api/upload': typeof ApiUploadRoute
  '/api/stream/$sessionId': typeof ApiStreamSessionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/analyze/$sessionId': typeof AnalyzeSessionIdRoute
  '/api/session': typeof ApiSessionRoute
  '/api/upload': typeof ApiUploadRoute
  '/api/stream/$sessionId': typeof ApiStreamSessionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/analyze/$sessionId'
    | '/api/session'
    | '/api/upload'
    | '/api/stream/$sessionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/analyze/$sessionId'
    | '/api/session'
    | '/api/upload'
    | '/api/stream/$sessionId'
  id:
    | '__root__'
    | '/'
    | '/analyze/$sessionId'
    | '/api/session'
    | '/api/upload'
    | '/api/stream/$sessionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnalyzeSessionIdRoute: typeof AnalyzeSessionIdRoute
  ApiSessionRoute: typeof ApiSessionRoute
  ApiUploadRoute: typeof ApiUploadRoute
  ApiStreamSessionIdRoute: typeof ApiStreamSessionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/upload': {
      id: '/api/upload'
      path: '/api/upload'
      fullPath: '/api/upload'
      preLoaderRoute: typeof ApiUploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/session': {
      id: '/api/session'
      path: '/api/session'
      fullPath: '/api/session'
      preLoaderRoute: typeof ApiSessionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analyze/$sessionId': {
      id: '/analyze/$sessionId'
      path: '/analyze/$sessionId'
      fullPath: '/analyze/$sessionId'
      preLoaderRoute: typeof AnalyzeSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/stream/$sessionId': {
      id: '/api/stream/$sessionId'
      path: '/api/stream/$sessionId'
      fullPath: '/api/stream/$sessionId'
      preLoaderRoute: typeof ApiStreamSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnalyzeSessionIdRoute: AnalyzeSessionIdRoute,
  ApiSessionRoute: ApiSessionRoute,
  ApiUploadRoute: ApiUploadRoute,
  ApiStreamSessionIdRoute: ApiStreamSessionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
